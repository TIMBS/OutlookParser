@{
    Layout = "Shared/_Layout.cshtml";
}
<div class="page-header">
    <h1>Analysis</h1>
</div>
<div id="emailsPerDayChart"></div>
<div id="senderGraph"></div>

@section PageStyles {
    <!-- Rickshaw Graph styles -->
    <link type="text/css" rel="stylesheet" href='@Url.Content("~/css/graph.css")'>
    <link type="text/css" rel="stylesheet" href='@Url.Content("~/css/graphdetail.css")'>
<style>
    .node {
        stroke: #fff;
        stroke-width: 1.5px;
    }

    .link {
        stroke: #999;
        stroke-opacity: .6;
    }
</style>
}

@section PageScripts {

    <!-- Rickshaw and d3 -->
    <script src='@Url.Content("~/js/d3.v3.js")'></script>
    <script src='@Url.Content("~/js/rickshaw.js")'></script>

    <!-- Chart script -->
    <script>
        d3.json('@Url.Content("~/graphs/data/EmailDailyCountSortedByDate")', function (error, json) {
            if (error) {
                return console.warn(error);
            }

            var graph = new Rickshaw.Graph({
                element: $("#emailsPerDayChart")[0],
                width: 600,
                height: 400,
                renderer: 'bar',
                series: [{
                    name: 'emails per day',
                    data: json,
                    color: 'steelblue'
                }]
            });

            var dateFormatter = function (x) { return new Date(x * 1000).toLocaleDateString() };
            new Rickshaw.Graph.Axis.Time({
                graph: graph
            });

            new Rickshaw.Graph.HoverDetail({
                graph: graph,
                formatter: function (series, x, y) {
                    var date = '<span class="date">' + dateFormatter(x) + '</span>';
                    var swatch = '<span class="detail_swatch" style="background-color: ' + series.color + '"></span>';
                    var content = swatch + series.name + ": " + parseInt(y) + '<br>' + date;
                    return content;
                }
            });

            new Rickshaw.Graph.Axis.Y({
                graph: graph,
                orientation: 'left',
                tickFormat: Rickshaw.Fixtures.Number.formatKMBT
            });

            graph.render();
        });

    </script>
    <!-- Network graph of senders and recipients -->
    <script>
        var graphWidth = 960,
    graphHeight = 500;

        var color = d3.scale.category20();

        var force = d3.layout.force()
            .charge(-200)
            .linkDistance(50)
            .size([graphWidth, graphHeight]);

        var svg = d3.select("#senderGraph").append("svg")
            .attr("width", graphWidth)
            .attr("height", graphHeight);

        d3.json('@Url.Content("~/graphs/data/GraphOfSendersAndRecipients")', function (error, graph) {
            force
                .nodes(graph.nodes)
                .links(graph.links)
                .start();

            var link = svg.selectAll(".link")
                .data(graph.links)
              .enter().append("line")
                .attr("class", "link")
                .style("stroke-width", function (d) { return Math.sqrt(d.value); });

            var node = svg.selectAll(".node")
                .data(graph.nodes)
              .enter().append("circle")
                .attr("class", "node")
                .attr("r", 5)
                .style("fill", function (d) { return color(d.group); })
                .call(force.drag);

            node.append("title")
                .text(function (d) { return d.name; });

            force.on("tick", function () {
                link.attr("x1", function (d) { return d.source.x; })
                    .attr("y1", function (d) { return d.source.y; })
                    .attr("x2", function (d) { return d.target.x; })
                    .attr("y2", function (d) { return d.target.y; });

                node.attr("cx", function (d) { return d.x; })
                    .attr("cy", function (d) { return d.y; });
            });
        });
    </script>
}